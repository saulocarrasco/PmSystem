@inject HttpHandleClient<TItem> httpHandle;
@inject NavigationManager NavigationManager

@typeparam TItem

@if (IsLoading)
{
    <h5>Loading...</h5>
}
else
{
    if (Data != null && Data.Count() > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    @foreach (var property in typeof(TItem).GetProperties())
                    {
                        if (Properties != null && !Properties.Contains(property.Name))
                        {
                            continue;
                        }
                        <th>@property.Name</th>
                    }

                    @if (!string.IsNullOrEmpty(EditUrl))
                    {
                        <th>Edit Option</th>
                    }
                    @if (!string.IsNullOrEmpty(DeleteEndPoint))
                    {
                        <th>Delete Option</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Data)
                {
                    <tr>
                        @foreach (var prop in typeof(TItem).GetProperties())
                        {
                            if (Properties != null && !Properties.Contains(prop.Name))
                            {
                                continue;
                            }
                            <td>@prop.GetValue(item)</td>
                        }
                        @if (!string.IsNullOrEmpty(EditUrl))
                        {
                            <td><button class="btn btn-warning" @onclick="@(() => EditItem(item))">Edit</button></td>
                        }
                        @if (!string.IsNullOrEmpty(DeleteEndPoint))
                        {
                            <td><button class="btn btn-danger" @onclick="@(() => DeleteItem(item))">Delete</button></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {

        <h5>No records!</h5>
    }
}

@code {

    [Parameter]
    public IEnumerable<TItem> Data { get; set; }
    [Parameter]
    public string ListEndpoint { get; set; }
    [Parameter]
    public string EditUrl { get; set; }
    [Parameter]
    public string DeleteEndPoint { get; set; }
    public bool IsLoading { get; set; }

    [Parameter]
    public IEnumerable<string> Properties { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        IsLoading = true;
        Data = await httpHandle.GetAllAsync(ListEndpoint);
        IsLoading = false;
    }

    private void EditItem(TItem item)
    {
        var idProperty = item.GetType().GetProperty("Id");
        var idValue = idProperty.GetValue(item);
        NavigationManager.NavigateTo($"/{EditUrl}/{idValue}");
    }
    private async Task DeleteItem(TItem item)
    {
        var idProperty = item.GetType().GetProperty("Id");
        var idValue = idProperty.GetValue(item);
        IsLoading = true;
        await httpHandle.DeleteAsync(DeleteEndPoint, Convert.ToInt32(idValue));
        await LoadItems();
        IsLoading = false;
    }
}
